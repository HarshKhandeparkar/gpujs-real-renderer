!function(s,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((s=s||self).GPUjsRealRenderer={})}(this,(function(s){"use strict";var t=function(s,t){return s.createKernel((function(s){const t=s[this.thread.y][this.thread.x];this.color(t[0],t[1],t[2])}),{output:t,graphical:!0})};var i=function(s,t,i,e,r,h){return s.createKernel((function(){const s=this.output.x,t=this.output.y,i=Math.floor(t*(this.constants.xOffset/100)),e=Math.floor(s*(this.constants.yOffset/100));return this.thread.x===e||this.thread.y===i?this.constants.axesColor:this.constants.bgColor}),{output:t,pipeline:!0,constants:{xOffset:i,yOffset:e,bgColor:r,axesColor:h},constantTypes:{bgColor:"Array(3)",axesColor:"Array(3)",xOffset:"Float",yOffset:"Float"}})};var e=function(s,t){return s.createKernel((function(s){return s[this.thread.y][this.thread.x]}),{output:t,pipeline:!0})};var r=class{constructor(s){if(this.canvasTag=s.canvasTag,this.dimensions=s.dimensions||{x:1e3,y:1e3},this.xScaleFactor=s.xScaleFactor||10,this.yScaleFactor=s.yScaleFactor||1,this.bgColor=s.bgColor||[0,0,0],this.axesColor=s.axesColor||[1,1,1],this.drawsPerFrame=s.drawsPerFrame||1,this.timeStep=s.timeStep||1/60,this.time=s.initTime||0,this.xOffset=s.xOffset,this.yOffset=s.yOffset,s.GPU=s.GPU||window.GPU,"number"!=typeof this.xOffset&&(this.xOffset=50),"number"!=typeof this.yOffset&&(this.yOffset=50),this.xOffset=Math.max(0,Math.min(100,this.xOffset)),this.yOffset=Math.max(0,Math.min(100,this.yOffset)),void 0===document.getElementById(this.canvasTag))throw"No Canvas Element Found";this._canvas=document.getElementById(this.canvasTag),this.gpu=new s.GPU({canvas:this._canvas,mode:"gpu",tactic:"precision"}),this._blankGraph=i(this.gpu,this.dimensions,this.xOffset,this.yOffset,this.bgColor,this.axesColor),this._cloneTexture=e(this.gpu,this.dimensions),this.graphPixels=this._blankGraph(),this._display=t(this.gpu,this.dimensions),this._doRender=!1}_drawFunc(s){return s}_draw(){this.time+=this.timeStep,this.graphPixels=this._drawFunc(this.graphPixels,this.time)}draw(s=1){for(let t=0;t<s;t++)this._draw();return this._display(this.graphPixels),this}_render(){for(let s=0;s<this.drawsPerFrame;s++)this._draw();this._display(this.graphPixels),this._doRender&&window.requestAnimationFrame(()=>{this._render()})}startRender(){return this._doRender=!0,this._render(),this}stopRender(){return this._doRender=!1,this}resetTime(){return this.time=0,this}reset(){return this.graphPixels=this._blankGraph(),this._display(this.graphPixels),this}};var h=function(s,t,i,e,r,h,a){return s.createKernel((function(s,t){const i=this.output.x,e=this.output.y;if(this.thread.x*Math.abs(this.constants.progressiveAxis-1)>=i-t||this.thread.y*this.constants.progressiveAxis>=e+t){const s=Math.floor(e*(this.constants.xOffset/100)),t=Math.floor(i*(this.constants.yOffset/100));return this.thread.x===t||this.thread.y===s?this.constants.axesColor:this.constants.bgColor}return s[this.thread.y+t*this.constants.progressiveAxis][this.thread.x+t*Math.abs(this.constants.progressiveAxis-1)]}),{output:t,pipeline:!0,constants:{progressiveAxis:"y"==i?1:0,xOffset:e,yOffset:r,axesColor:h,bgColor:a},constantTypes:{progressiveAxis:"Integer",xOffset:"Float",yOffset:"Float",axesColor:"Array(3)",bgColor:"Array(3)"}})};var a=function(s,t,i,e,r,h,a,o,n,l,c){return s.createKernel((function(s,t,i,e,r){const h=this.thread.x+r*Math.abs(this.constants.progressiveAxis-1),a=this.thread.y+r*this.constants.progressiveAxis,o=this.output.x,n=this.output.y,l=h/this.constants.xScaleFactor-o*(this.constants.yOffset/100)/this.constants.xScaleFactor,c=a/this.constants.yScaleFactor-n*(this.constants.xOffset/100)/this.constants.yScaleFactor,f=(l-i)*this.constants.xScaleFactor,x=(c-t)*this.constants.yScaleFactor,d=Math.sqrt(f*f+x*x);let u=l*(t-e)-c-i*(t-e)+t,p=Math.abs(u)/Math.sqrt((t-e)*(t-e)+1);return d<=this.constants.brushSize?this.constants.brushColor:p<=this.constants.lineThickness&&l<=i&&l>=i-1&&c<=Math.max(t,e)&&c>=Math.min(t,e)?this.constants.lineColor:s[this.thread.y][this.thread.x]}),{output:t,pipeline:!0,constants:{brushSize:i,brushColor:e,lineThickness:n,lineColor:l,xScaleFactor:r,yScaleFactor:h,xOffset:a,yOffset:o,progressiveAxis:"y"==c?1:0},constantTypes:{brushColor:"Array(3)",brushSize:"Float",lineThickness:"Float",lineColor:"Array(3)",xScaleFactor:"Float",yScaleFactor:"Float",xOffset:"Float",yOffset:"Float",progressiveAxis:"Integer"}})};var o={RealRenderer:r,RealLineGraph:class extends r{constructor(s){super(s),this.progressiveAxis=s.progressiveAxis||"x",this.progressiveAxis=this.progressiveAxis.toLowerCase(),this.progressionMode=s.progressionMode||"overflow",this.progressInterval=s.progressInterval||1,this.brushSize=s.brushSize||1,this.brushColor=s.brushColor||[1,1,1],this.lineThickness=s.lineThickness||.05,this.lineColor=s.lineColor||[0,.5,0],this._progressGraph=h(this.gpu,this.dimensions,this.progressiveAxis,this.xOffset,this.yOffset,this.axesColor,this.bgColor),this._lastProgress=0,this._numProgress=0,this._dataIndex=1,this._lastData=0,this._addData=a(this.gpu,this.dimensions,this.brushSize,this.brushColor,this.xScaleFactor,this.yScaleFactor,this.xOffset,this.yOffset,this.lineThickness,this.lineColor,this.progressiveAxis),this.limits={x:[0-this.yOffset/100*(this.dimensions[0]/this.xScaleFactor),this.dimensions[0]/this.xScaleFactor-this.yOffset/100*(this.dimensions[0]/this.xScaleFactor)],y:[0-this.xOffset/100*(this.dimensions[1]/this.yScaleFactor),this.dimensions[1]/this.yScaleFactor-this.xOffset/100*(this.dimensions[1]/this.yScaleFactor)]}}addData(s){if(s=parseFloat(s),isNaN(s))throw"Data value not a number.";if(this.graphPixels=this._addData(this._cloneTexture(this.graphPixels),s,this._dataIndex++,this._lastData,this._numProgress),this._lastData=s,this._dataIndex>=this.limits.x[1]&&"continous"!=this.progressionMode){let s=Math.ceil("y"==this.progressiveAxis?this.yScaleFactor:this.xScaleFactor);this.graphPixels=this._progressGraph(this._cloneTexture(this.graphPixels),s),this._numProgress+=s,"y"==this.progressiveAxis?(this.limits.y[0]+=s/this.yScaleFactor,this.limits.y[1]+=s/this.yScaleFactor):(this.limits.x[1]+=s/this.xScaleFactor,this.limits.x[0]+=s/this.xScaleFactor)}return this._display(this.graphPixels),this}_drawFunc(s,t){return"continous"==this.progressionMode&&t-this._lastProgress>=this.progressInterval?(this._lastProgress=t,this._numProgress++,"y"==this.progressiveAxis?(this.limits.y[0]+=1/this.yScaleFactor,this.limits.y[1]+=1/this.yScaleFactor):(this.limits.x[0]+=1/this.xScaleFactor,this.limits.x[1]+=1/this.xScaleFactor),this._progressGraph(this._cloneTexture(s),1)):s}reset(){return super.reset(),this._dataIndex=1,this._lastData=0,this._lastProgress=0,this._numProgress=0,this.limits={x:[0-this.yOffset/100*(this.dimensions[0]/this.xScaleFactor),this.dimensions[0]/this.xScaleFactor-this.yOffset/100*(this.dimensions[0]/this.xScaleFactor)],y:[0-this.xOffset/100*(this.dimensions[1]/this.yScaleFactor),this.dimensions[1]/this.yScaleFactor-this.xOffset/100*(this.dimensions[1]/this.yScaleFactor)]},this}}},n=o.RealRenderer,l=o.RealLineGraph;s.RealLineGraph=l,s.RealRenderer=n,s.default=o,Object.defineProperty(s,"__esModule",{value:!0})}));
